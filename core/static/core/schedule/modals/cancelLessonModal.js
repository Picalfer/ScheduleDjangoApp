import {Modal} from './modal.js';
import {showNotification} from '../utils.js';

export class CancelLessonModal extends Modal {
    constructor(options) {
        const content = CancelLessonModal.generateContent();
        const footer = CancelLessonModal.generateFooter();

        super({
            modalId: 'cancel-lesson-modal',
            title: '–û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞',
            subTitle: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
            content,
            footer,
            size: 'small'
        });

        this.onConfirm = options.onConfirm;
        this.onCancel = options.onCancel;

        this.initElements();
        this.setupEventListeners();

        this.selectedSide = null;
        this.selectedReason = null;
        this.otherReasonText = '';
    }

    static generateContent() {
        return `
            <div class="cancel-options">
                <h3>–ü–æ —á—å–µ–π –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è —É—Ä–æ–∫?</h3>
                <div class="side-options">
                    <label class="option-card">
                        <input type="radio" name="cancel-side" value="teacher">
                        <div class="card-content">
                            <span class="icon">üë®‚Äçüè´</span>
                            <span class="text">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</span>
                        </div>
                    </label>
                    <label class="option-card">
                        <input type="radio" name="cancel-side" value="student">
                        <div class="card-content">
                            <span class="icon">üë®‚Äçüéì</span>
                            <span class="text">–£—á–µ–Ω–∏–∫</span>
                        </div>
                    </label>
                </div>
                
                <div class="reasons-section" style="display: none;">
                    <h3>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã</h3>
                    <div class="reason-options">
                        <select class="reason-select">
                            <option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É</option>
                        </select>
                    </div>
                    <div class="other-reason-container" style="display: none; margin-top: 15px;">
                        <textarea class="other-reason-input" placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)" rows="3"></textarea>
                        <div class="char-counter"><span class="current">0</span>/<span class="min">5</span> —Å–∏–º–≤–æ–ª–æ–≤</div>
                    </div>
                </div>
            </div>
        `;
    }

    static generateFooter() {
        return `
            <button class="cancel-button">–ó–∞–∫—Ä—ã—Ç—å</button>
            <button class="submit-button" disabled>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É</button>
        `;
    }

    initElements() {
        this.sideOptions = this.modalElement.querySelectorAll('input[name="cancel-side"]');
        this.reasonsSection = this.modalElement.querySelector('.reasons-section');
        this.reasonSelect = this.modalElement.querySelector('.reason-select');
        this.otherReasonContainer = this.modalElement.querySelector('.other-reason-container');
        this.otherReasonInput = this.modalElement.querySelector('.other-reason-input');
        this.charCounter = this.modalElement.querySelector('.char-counter');
        this.currentCharCount = this.modalElement.querySelector('.char-counter .current');
        this.minCharCount = this.modalElement.querySelector('.char-counter .min');

        this.cancelButton = this.modalElement.querySelector('.cancel-button');
        this.submitButton = this.modalElement.querySelector('.submit-button');
    }

    setupEventListeners() {
        this.sideOptions.forEach(option => {
            option.addEventListener('change', (e) => {
                this.selectedSide = e.target.value;
                this.updateReasons();
                this.reasonsSection.style.display = 'block';
                this.checkFormValidity();
            });
        });

        this.reasonSelect.addEventListener('change', (e) => {
            this.selectedReason = e.target.value;
            this.otherReasonContainer.style.display = this.selectedReason === 'other' ? 'block' : 'none';
            this.checkFormValidity();
        });

        this.otherReasonInput.addEventListener('input', (e) => {
            this.otherReasonText = e.target.value;
            const count = this.otherReasonText.length;
            this.currentCharCount.textContent = count;

            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Å—á—ë—Ç—á–∏–∫–∞ –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            if (count < 5) {
                this.charCounter.style.color = 'var(--danger-color)';
            } else {
                this.charCounter.style.color = 'var(--success-color)';
            }

            this.checkFormValidity();
        });

        this.submitButton.addEventListener('click', () => {
            if (!this.isFormValid()) {
                showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
                return;
            }

            const reasonData = {
                side: this.selectedSide,
                reason: this.selectedReason,
                reasonText: this.selectedReason === 'other' ? this.otherReasonText : null
            };

            if (this.onConfirm) {
                this.onConfirm(reasonData);
            }
            this.close();
        });

        this.cancelButton.addEventListener('click', () => {
            if (this.onCancel) {
                this.onCancel();
            }
            this.close();
        });
    }

    updateReasons() {
        this.reasonSelect.innerHTML = '<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É</option>';

        const reasons = this.selectedSide === 'teacher'
            ? [
                {value: 'illness', label: '–ë–æ–ª–µ–∑–Ω—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'},
                {value: 'emergency', label: '–ß—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è'},
                {value: 'electricity', label: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞/—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞'},
                {value: 'rest', label: '–û—Ç–≥—É–ª'},
                {value: 'other', label: '–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞'}
            ]
            : [
                {value: 'illness', label: '–ë–æ–ª–µ–∑–Ω—å —É—á–µ–Ω–∏–∫–∞'},
                {value: 'no_show', label: '–£—á–µ–Ω–∏–∫ –Ω–µ —è–≤–∏–ª—Å—è'},
                {value: 'reschedule', label: '–ü–µ—Ä–µ–Ω–æ—Å —É—Ä–æ–∫–∞'},
                {value: 'other', label: '–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞'}
            ];

        reasons.forEach(reason => {
            const option = document.createElement('option');
            option.value = reason.value;
            option.textContent = reason.label;
            this.reasonSelect.appendChild(option);
        });

        this.selectedReason = null;
        this.otherReasonContainer.style.display = 'none';
        this.otherReasonInput.value = '';
        this.otherReasonText = '';
        this.currentCharCount.textContent = '0';
        this.charCounter.style.color = 'var(--danger-color)';
    }

    isFormValid() {
        if (!this.selectedSide || !this.selectedReason) return false;

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "–¥—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞", –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if (this.selectedReason === 'other' && this.otherReasonText.length < 5) {
            return false;
        }

        return true;
    }

    checkFormValidity() {
        this.submitButton.disabled = !this.isFormValid();
    }

    close() {
        super.close();
        this.selectedSide = null;
        this.selectedReason = null;
        this.otherReasonText = '';
        this.reasonsSection.style.display = 'none';
        this.otherReasonContainer.style.display = 'none';
        this.sideOptions.forEach(option => option.checked = false);
        this.reasonSelect.innerHTML = '<option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É</option>';
        this.otherReasonInput.value = '';
        this.currentCharCount.textContent = '0';
        this.charCounter.style.color = 'var(--danger-color)';
        this.submitButton.disabled = true;
    }
}