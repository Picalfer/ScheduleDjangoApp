import {Modal} from './modal.js';
import {calendarManager, repository} from "../app.js";
import * as utils from '../utils.js';
import {showNotification} from '../utils.js';

export class LessonModal extends Modal {
    constructor() {
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–µ this
        const content = LessonModal.generateStaticContent();
        const footer = LessonModal.generateStaticFooter();
        const headerElements = LessonModal.createStaticAdminElements();

        // –ó–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ–º super()
        super({
            modalId: 'lesson-modal',
            title: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ',
            content,
            footer,
            headerElements,
        });

        // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å this
        this.initElements();
        this.setupEventListeners();
    }

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∫–∏
    static createStaticAdminElements() {
        const createAdminLink = (icon, title) => {
            const link = document.createElement('a');
            link.className = 'admin-link';
            link.innerHTML = icon;
            link.title = title;
            link.target = '_blank';
            return link;
        };

        const lessonBtn = createAdminLink('‚úèÔ∏è', '–û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫ –≤ –∞–¥–º–∏–Ω–∫–µ');
        const studentBtn = createAdminLink('üéì', '–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –∞–¥–º–∏–Ω–∫–µ');
        const clientBtn = createAdminLink('üíº', '–û—Ç–∫—Ä—ã—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∞–¥–º–∏–Ω–∫–µ');

        return [lessonBtn, studentBtn, clientBtn];
    }

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    static generateStaticContent() {
        return `
            <div class="lesson-info">
                <p class="lesson-type"></p>
                <p class="lesson-student"></p>
            </div>
            <form id="lesson-form">
                <div class="form-group">
                    <label for="lesson-date">–î–∞—Ç–∞</label>
                    <input type="text" id="lesson-date" readonly>
                </div>
                <div class="form-group">
                    <label for="lesson-course">–ö—É—Ä—Å</label>
                    <input type="text" id="lesson-course" readonly>
                </div>
                <div class="form-group">
                    <label for="lesson-topic">–¢–µ–º–∞ —É—Ä–æ–∫–∞ <span class="required">*</span></label>
                    <div class="theme-input-group">
                        <input type="text" id="lesson-topic" name="lesson-topic">
                        <button type="button" class="contact-btn insert-prev-theme">–í—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—à–ª—É—é —Ç–µ–º—É</button>
                    </div>
                    <div class="previous-theme-hint" style="display: none;">–ü—Ä–æ—à–ª–∞—è —Ç–µ–º–∞: <span id="previous_theme_text"></span></div>
                </div>
                <div class="form-group">
                    <label for="lesson-homework">–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</label>
                    <textarea id="lesson-homework" rows="3"></textarea>
                </div>
                <div class="form-group">
                    <label for="lesson-comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
                    <textarea id="lesson-comment" rows="3"></textarea>
                </div>
            </form>
        `;
    }

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—É—Ç–µ—Ä–∞
    static generateStaticFooter() {
        return `
            <button class="cancel-button cancel-lesson-btn">–û—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫</button>
            <button class="submit-button admit-lesson-btn">–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã–º</button>
        `;
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    initElements() {
        this.lessonId = null;
        this.lessonData = null;
        this.form = this.modalElement.querySelector('#lesson-form');
        this.topicInput = this.modalElement.querySelector('#lesson-topic');
        this.cancelButton = this.modalElement.querySelector('.cancel-button');
        this.submitButton = this.modalElement.querySelector('.submit-button');
        this.lessonTypeElement = this.modalElement.querySelector('.lesson-type');
        this.lessonStudentElement = this.modalElement.querySelector('.lesson-student');
        this.insertPrevTopic = this.modalElement.querySelector('.insert-prev-theme');
        this.previousThemeHint = this.modalElement.querySelector('.previous-theme-hint');
        this.previousThemeText = this.modalElement.querySelector('#previous_theme_text');

        const [adminButton, adminStudentButton, adminClientButton] = this.modalElement.querySelectorAll('.admin-link');
        this.adminButton = adminButton;
        this.adminStudentButton = adminStudentButton;
        this.adminClientButton = adminClientButton;
    }

    open(lessonData) {
        console.log(lessonData)

        this.lessonId = lessonData.id;
        this.lessonData = lessonData;

        this.setLessonData(lessonData);

        if (lessonData.status === "scheduled") {
            this.previousThemeHint.style.display = 'block';
            this.insertPrevTopic.style.display = 'block';
            this.previousThemeText.textContent = lessonData.previous_topic || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        } else {
            this.previousThemeHint.style.display = 'none';
            this.insertPrevTopic.style.display = 'none';
        }

        this.setFormState(lessonData);
        super.open();
    }

    setupEventListeners() {
        // –ù–∞—Å–ª–µ–¥—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        //super.setupEventListeners();

        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.cancelButton.addEventListener('click', (e) => {
            e.preventDefault();
            this.cancelLesson();
        });

        this.submitButton.addEventListener('click', (e) => {
            e.preventDefault();
            if (this.validateForm()) {
                this.admitLesson();
            }
        });

        this.topicInput.addEventListener('input', () => {
            const topicGroup = this.topicInput.closest('.form-group');
            if (this.topicInput.value.trim()) {
                topicGroup.classList.remove('error');
            }
        });

        this.insertPrevTopic.addEventListener('click', function () {
            const previousTheme = document.getElementById('previous_theme_text').textContent;
            const currentThemeInput = document.getElementById('lesson-topic');

            currentThemeInput.focus();

            if (previousTheme === "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö") {
                showNotification("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
            }

            // –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—à–ª—É—é —Ç–µ–º—É –≤ —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ
            currentThemeInput.value = previousTheme;
        });
    }

    setLessonData(lessonData) {
        if (userData.isAdmin) {
            // –ö–Ω–æ–ø–∫–∞ —É—Ä–æ–∫–∞
            this.adminButton.href = `/admin/core/lesson/${lessonData.id}/change/`;
            this.adminButton.style.display = 'inline-block';

            // –ö–Ω–æ–ø–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å student_id –≤ lessonData)
            if (lessonData.student) {
                this.adminStudentButton.href = `/admin/core/student/${lessonData.student}/change/`;
                this.adminStudentButton.style.display = 'inline-block';
            } else {
                this.adminStudentButton.style.display = 'none';
            }

            // –ö–Ω–æ–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å client_id –≤ lessonData)
            if (lessonData.client) {
                this.adminClientButton.href = `/admin/core/client/${lessonData.client}/change/`;
                this.adminClientButton.style.display = 'inline-block';
            } else {
                this.adminClientButton.style.display = 'none';
            }
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
            this.adminButton.style.display = 'none';
            this.adminStudentButton.style.display = 'none';
            this.adminClientButton.style.display = 'none';
        }

        // –î–∞—Ç–∞ —É—Ä–æ–∫–∞
        const dateElement = this.modalElement.querySelector('#lesson-date');
        dateElement.value = new Date(lessonData.date).toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        // –ö—É—Ä—Å
        this.modalElement.querySelector('#lesson-course').value = lessonData.course;

        // –ü—Ä–æ—à–ª–∞—è —Ç–µ–º–∞
        this.modalElement.querySelector('#previous_theme_text').textContent = lessonData.previous_topic;

        const types = {
            recurring: ['üîÑ', '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —É—Ä–æ–∫'],
            demo: ['üéØ', '–î–µ–º–æ-—É—Ä–æ–∫'],
            single: ['1Ô∏è‚É£', '–†–∞–∑–æ–≤—ã–π —É—Ä–æ–∫']
        };

        // –¢–∏–ø —É—Ä–æ–∫–∞
        const [emoji, text] = types[lessonData.lesson_type] || ['üìÖ', '–£—Ä–æ–∫'];

        this.lessonTypeElement.innerHTML = `${emoji} ${text}`;

        // –£—á–µ–Ω–∏–∫
        this.lessonStudentElement.textContent = `–£—á–µ–Ω–∏–∫: ${lessonData.student_name || lessonData.student}`;

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        this.modalElement.querySelector('#lesson-topic').value = lessonData.lesson_topic || '';
        this.modalElement.querySelector('#lesson-homework').value = lessonData.homework || '';
        this.modalElement.querySelector('#lesson-comment').value = lessonData.lesson_notes || '';
    }

    setFormState(lessonData) {
        const isCompletedOrCanceled = ['completed', 'canceled'].includes(lessonData.status.toLowerCase());
        const fields = ['lesson-date', 'lesson-course', 'lesson-topic', 'lesson-homework', 'lesson-comment'];

        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π
        fields.forEach(id => {
            const field = this.modalElement.querySelector(`#${id}`);
            if (field) field.disabled = isCompletedOrCanceled;
        });

        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
        this.submitButton.disabled = isCompletedOrCanceled;
        this.cancelButton.disabled = isCompletedOrCanceled;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ç–∏–ø–∞ —É—Ä–æ–∫–∞
        const modalContent = this.modalElement.querySelector('.modal-content');
        modalContent.classList.remove('permanent', 'one-time', 'completed', 'canceled');
        modalContent.classList.add(lessonData.status.toLowerCase());
    }

    async admitLesson() {
        const getValue = (id) => {
            const val = this.modalElement.querySelector(`#${id}`).value.trim();
            return val === '' ? null : val;
        };

        const lessonData = {
            topic: getValue('lesson-topic'),
            notes: getValue('lesson-comment'),
            homework: getValue('lesson-homework')
        };

        const confirmationMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ä–æ–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–π?\n\n` +
            `–¢–µ–º–∞: ${lessonData.topic || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
            `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${lessonData.notes || '–Ω–µ—Ç'}\n` +
            `–î–ó: ${lessonData.homework || '–Ω–µ –∑–∞–¥–∞–Ω–æ'}` +
            (this.lessonData.lesson_type !== 'demo' ? `\n\n–ë–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ —É–º–µ–Ω—å—à–∏—Ç—Å—è –Ω–∞ 1.` : '');

        if (!confirm(confirmationMessage)) {
            return;
        }

        try {
            const response = await repository.completeLesson(this.lessonId, lessonData);
            if (this.lessonData.lesson_type !== 'demo') {
                showNotification(
                    `–£—Ä–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω! –û—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–∫–æ–≤: ${response.remaining_balance}`,
                    "success"
                );
            } else {
                showNotification(
                    `–î–µ–º–æ —É—Ä–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω!`,
                    "success"
                );
            }

            calendarManager.loadSchedule();
            this.close();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:", error);
            showNotification(
                error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —É—Ä–æ–∫–∞",
                "error"
            );
        }
    }

    cancelLesson() {
        utils.showConfirmationModal({
            text: "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã:",
            inputConfig: {
                type: 'textarea',
                placeholder: '–ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤',
                required: true
            },
            onConfirm: async (reason) => {
                try {
                    await repository.cancelLesson(this.lessonId, reason);
                    showNotification(`–£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω!`, "success");
                    calendarManager.loadSchedule();
                    this.close();
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É—Ä–æ–∫–∞:", error);
                    showNotification(
                        error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É—Ä–æ–∫–∞",
                        "error"
                    );
                }
            }
        });
    }

    validateForm() {
        let isValid = true;
        const topicGroup = this.topicInput.closest('.form-group');

        if (!this.topicInput.value.trim()) {
            topicGroup.classList.add('error');
            isValid = false;
        } else {
            topicGroup.classList.remove('error');
        }

        return isValid;
    }

    close() {
        super.close();
        this.form.reset();
        this.topicInput.closest('.form-group').classList.remove('error');
    }
}