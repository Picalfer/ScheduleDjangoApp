import {Modal} from './modal.js';
import {calendarManager, repository} from "../app.js";
import * as utils from '../utils.js';
import {showNotification} from '../utils.js';

export class LessonModal extends Modal {
    constructor() {
        super({
            modalId: 'lesson-modal',
            title: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ',
            content: `
        <div class="lesson-info">
          <p class="lesson-type"></p>
          <p class="lesson-student"></p>
        </div>
        <form id="lesson-form">
          <div class="form-group">
            <label for="lesson-date">–î–∞—Ç–∞</label>
            <input type="text" id="lesson-date" readonly>
          </div>
          <div class="form-group">
            <label for="lesson-course">–ö—É—Ä—Å</label>
            <input type="text" id="lesson-course" readonly>
          </div>
          <div class="form-group">
            <label for="lesson-topic">–¢–µ–º–∞ —É—Ä–æ–∫–∞ <span class="required">*</span></label>
            <input type="text" id="lesson-topic" required>
            <div class="error-message">–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</div>
          </div>
          <div class="form-group">
            <label for="lesson-homework">–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</label>
            <textarea id="lesson-homework" rows="3"></textarea>
          </div>
          <div class="form-group">
            <label for="lesson-comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
            <textarea id="lesson-comment" rows="3"></textarea>
          </div>
        </form>
      `,
            footer: `
        <button class="cancel-button cancel-lesson-btn">–û—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫</button>
        <button class="submit-button admit-lesson-btn">–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã–º</button>
      `
        });

        this.lessonId = null;
        this.lessonData = null;
        this.form = this.modalElement.querySelector('#lesson-form');
        this.topicInput = this.modalElement.querySelector('#lesson-topic');
        this.cancelButton = this.modalElement.querySelector('.cancel-button');
        this.submitButton = this.modalElement.querySelector('.submit-button');
        this.lessonTypeElement = this.modalElement.querySelector('.lesson-type');
        this.lessonStudentElement = this.modalElement.querySelector('.lesson-student');

        this.setupEventListeners();
    }

    setupEventListeners() {
        // –ù–∞—Å–ª–µ–¥—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        //super.setupEventListeners();

        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.cancelButton.addEventListener('click', (e) => {
            e.preventDefault();
            this.cancelLesson();
        });

        this.submitButton.addEventListener('click', (e) => {
            e.preventDefault();
            if (this.validateForm()) {
                this.admitLesson();
            }
        });

        this.topicInput.addEventListener('input', () => {
            const topicGroup = this.topicInput.closest('.form-group');
            if (this.topicInput.value.trim()) {
                topicGroup.classList.remove('error');
            }
        });
    }

    open(lessonData) {
        this.lessonId = lessonData.id;
        this.lessonData = lessonData;
        console.log(`–û—Ç–∫—Ä—ã—Ç —É—Ä–æ–∫ –ø–æ–¥ id: ${this.lessonId}`);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
        this.setLessonData(lessonData);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
        this.setFormState(lessonData);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        super.open();
    }

    setLessonData(lessonData) {
        // –î–∞—Ç–∞ —É—Ä–æ–∫–∞
        const dateElement = this.modalElement.querySelector('#lesson-date');
        dateElement.value = new Date(lessonData.date).toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        // –ö—É—Ä—Å
        this.modalElement.querySelector('#lesson-course').value = lessonData.course;

        const types = {
            recurring: ['üîÑ', '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —É—Ä–æ–∫'],
            demo: ['üéØ', '–î–µ–º–æ-—É—Ä–æ–∫'],
            single: ['1Ô∏è‚É£', '–†–∞–∑–æ–≤—ã–π —É—Ä–æ–∫']
        };

        // –¢–∏–ø —É—Ä–æ–∫–∞
        const [emoji, text] = types[lessonData.lesson_type] || ['üìÖ', '–£—Ä–æ–∫'];

        this.lessonTypeElement.innerHTML = `${emoji} ${text}`;

        // –£—á–µ–Ω–∏–∫
        this.lessonStudentElement.textContent = `–£—á–µ–Ω–∏–∫: ${lessonData.student_name || lessonData.student}`;

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        this.modalElement.querySelector('#lesson-topic').value = lessonData.lesson_topic || '';
        this.modalElement.querySelector('#lesson-homework').value = lessonData.homework || '';
        this.modalElement.querySelector('#lesson-comment').value = lessonData.lesson_notes || '';
    }

    setFormState(lessonData) {
        const isCompletedOrCanceled = ['completed', 'canceled'].includes(lessonData.status.toLowerCase());
        const fields = ['lesson-date', 'lesson-course', 'lesson-topic', 'lesson-homework', 'lesson-comment'];

        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π
        fields.forEach(id => {
            const field = this.modalElement.querySelector(`#${id}`);
            if (field) field.disabled = isCompletedOrCanceled;
        });

        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
        this.submitButton.disabled = isCompletedOrCanceled;
        this.cancelButton.disabled = isCompletedOrCanceled;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ç–∏–ø–∞ —É—Ä–æ–∫–∞
        const modalContent = this.modalElement.querySelector('.modal-content');
        modalContent.classList.remove('permanent', 'one-time', 'completed', 'canceled');
        modalContent.classList.add(lessonData.status.toLowerCase());
    }

    async admitLesson() {
        const getValue = (id) => {
            const val = this.modalElement.querySelector(`#${id}`).value.trim();
            return val === '' ? null : val;
        };

        const lessonData = {
            topic: getValue('lesson-topic'),
            notes: getValue('lesson-comment'),
            homework: getValue('lesson-homework')
        };

        const confirmationMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ä–æ–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–π?\n\n` +
            `–¢–µ–º–∞: ${lessonData.topic || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
            `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${lessonData.notes || '–Ω–µ—Ç'}\n` +
            `–î–ó: ${lessonData.homework || '–Ω–µ –∑–∞–¥–∞–Ω–æ'}` +
            (this.lessonData.lesson_type !== 'demo' ? `\n\n–ë–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ —É–º–µ–Ω—å—à–∏—Ç—Å—è –Ω–∞ 1.` : '');

        if (!confirm(confirmationMessage)) {
            return;
        }

        try {
            const response = await repository.completeLesson(this.lessonId, lessonData);
            if (this.lessonData.lesson_type !== 'demo') {
                showNotification(
                    `–£—Ä–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω! –û—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–∫–æ–≤: ${response.remaining_balance}`,
                    "success"
                );
            } else {
                showNotification(
                    `–î–µ–º–æ —É—Ä–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω!`,
                    "success"
                );
            }

            calendarManager.loadSchedule();
            this.close();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:", error);
            showNotification(
                error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —É—Ä–æ–∫–∞",
                "error"
            );
        }
    }

    cancelLesson() {
        utils.showConfirmationModal({
            text: "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã:",
            inputConfig: {
                type: 'textarea',
                placeholder: '–ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤',
                required: true
            },
            onConfirm: async (reason) => {
                try {
                    await repository.cancelLesson(this.lessonId, reason);
                    showNotification(`–£—Ä–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω!`, "success");
                    calendarManager.loadSchedule();
                    this.close();
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É—Ä–æ–∫–∞:", error);
                    showNotification(
                        error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É—Ä–æ–∫–∞",
                        "error"
                    );
                }
            }
        });
    }

    validateForm() {
        let isValid = true;
        const topicGroup = this.topicInput.closest('.form-group');

        if (!this.topicInput.value.trim()) {
            topicGroup.classList.add('error');
            isValid = false;
        } else {
            topicGroup.classList.remove('error');
        }

        return isValid;
    }

    close() {
        super.close();
        this.form.reset();
        this.topicInput.closest('.form-group').classList.remove('error');
    }
}