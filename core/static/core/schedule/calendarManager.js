import * as repository from './repository.js';
import {showNotification} from "./utils.js";

const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];

export class CalendarManager {
    constructor() {
        this.currentWeekOffset = 0;
        this.lessons = {};
        this.openSlots = {};
        this.displayedLessons = new Set();
        this.startHour = 6;
        this.endHour = 18;
    }

    getWeekDates(offset = 0) {
        const today = new Date();
        const currentDay = today.getDay();
        const diff = currentDay === 0 ? 6 : currentDay - 1;

        const monday = new Date(today);
        monday.setDate(today.getDate() - diff + (offset * 7));

        const dates = [];
        for (let i = 0; i < 7; i++) {
            const date = new Date(monday);
            date.setDate(monday.getDate() + i);
            dates.push(date); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç Date, –∞ –Ω–µ —á–∏—Å–ª–æ
        }

        return dates;
    }

    formatDate(date) {
        const months = [
            '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
            '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
        ];
        return `${date.getDate()} ${months[date.getMonth()]}`;
    }

    updateHeaderDates() {
        const dates = this.getWeekDates(this.currentWeekOffset);
        const dateElements = document.querySelectorAll('.date');
        const dayHeaders = document.querySelectorAll('.day-header');

        const today = new Date();
        const currentDate = today.getDate();
        const currentMonth = today.getMonth();
        const currentYear = today.getFullYear();

        dateElements.forEach((element, index) => {
            const displayedDate = new Date(today);
            displayedDate.setDate(today.getDate() - (today.getDay() === 0 ? 6 : today.getDay() - 1) + index + (this.currentWeekOffset * 7));

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º formatDate –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã
            element.textContent = this.formatDate(displayedDate);

            if (displayedDate.getDate() === currentDate &&
                displayedDate.getMonth() === currentMonth &&
                displayedDate.getFullYear() === currentYear) {
                dayHeaders[index].classList.add('current-day');
            } else {
                dayHeaders[index].classList.remove('current-day');
            }
        });
    }

    updateWeekInfo() {
        const today = new Date();
        const currentDay = today.getDay();
        const diff = currentDay === 0 ? 6 : currentDay - 1;

        const monday = new Date(today);
        monday.setDate(today.getDate() - diff + (this.currentWeekOffset * 7));

        const sunday = new Date(monday);
        sunday.setDate(monday.getDate() + 6);

        const weekRangeElement = document.getElementById('week-range');
        weekRangeElement.textContent = `${this.formatDate(monday)} - ${this.formatDate(sunday)}`;
    }

    clearSchedule() {
        document.querySelectorAll('.week-day .hour').forEach(hour => {
            if (!hour.querySelector('.lesson')) {
                hour.className = 'hour';
                hour.innerHTML = '';
            }
        });
    }

    createLessonHTML(lesson) {
        const emoji = lesson.is_recurring ? 'üîÑ' : '1Ô∏è‚É£';
        const statusText = lesson.is_recurring ? '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —É—Ä–æ–∫' : '–†–∞–∑–æ–≤—ã–π —É—Ä–æ–∫';

        return `
        <div class="lesson ${lesson.is_recurring ? 'permanent' : 'one-time'}" 
             data-lesson-id="${lesson.id}"
             onclick="window.openLessonModal(${JSON.stringify(lesson).replace(/"/g, '&quot;')})">
            <h4 data-emoji="${emoji}">${statusText}</h4>
            <p>üë©‚Äçüéì <span id="student-name">${lesson.student_name || `Student ${lesson.student}`}</span></p>
            <p>üìö <span id="subject-name">${lesson.subject}</span></p>
        </div>
    `;
    }

    generateTimeSlots() {
        const timeColumn = document.querySelector('.time-column');
        const weekDays = document.querySelectorAll('.week-day');

        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã
        timeColumn.innerHTML = '';
        weekDays.forEach(day => day.innerHTML = '');

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
        for (let hour = this.startHour; hour <= this.endHour; hour++) {
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∞—Å –≤ "HH:00"
            const formattedHour = `${String(hour).padStart(2, '0')}:00`;

            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –∫–æ–ª–æ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏
            const timeSlot = document.createElement('div');
            timeSlot.className = 'time';
            timeSlot.innerHTML = `<p>${formattedHour}</p>`;
            timeColumn.appendChild(timeSlot);

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
            weekDays.forEach((day, dayIndex) => {
                const hourSlot = document.createElement('div');
                hourSlot.className = 'hour';

                // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã data-day –∏ data-hour
                hourSlot.setAttribute('data-day', daysOfWeek[dayIndex]); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è
                hourSlot.setAttribute('data-hour', formattedHour); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Å

                day.appendChild(hourSlot);
            });
        }
    }

    displayOpenSlots(days) {
        if (!this.openSlots) {
            console.warn("openSlots –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ —Ä–∞–≤–Ω—ã null");
            return;
        }

        days.forEach((day) => {
            const dayElement = document.getElementById(day);
            if (!dayElement) {
                console.error("–≠–ª–µ–º–µ–Ω—Ç –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω:", day);
                return;
            }

            const slots = this.openSlots[day] || [];
            slots.forEach(time => {
                const hour = parseInt(time.split(':')[0]);
                if (hour >= this.startHour && hour <= this.endHour) {
                    const hourIndex = hour - this.startHour;
                    const hourElement = dayElement.children[hourIndex];
                    if (hourElement) {
                        hourElement.classList.add('open-window');
                    }
                }
            });
        });
    }

    displayRegularLessons(days, dates) {
        if (!this.lessons?.students) return;

        this.lessons.students.forEach(student => {
            student.regularSchedule.forEach(lesson => {
                const hour = parseInt(lesson.time.split(':')[0]);
                if (hour >= this.startHour && hour <= this.endHour) {
                    const dayElement = document.getElementById(lesson.day);
                    if (dayElement) {
                        const hourElement = dayElement.children[hour - this.startHour];
                        if (hourElement) {
                            hourElement.innerHTML = this.createLessonHTML({
                                id: student.id,
                                date: dates[days.indexOf(lesson.day)].toISOString().split('T')[0],
                                time: lesson.time,
                                student: student.name,
                                subject: lesson.subject,
                                is_recurring: true
                            });
                        }
                    }
                }
            });
        });
    }

    displayOneTimeLessons() {
        if (!this.lessons?.students) return;

        const {start: weekStart, end: weekEnd} = this.getWeekRange(this.currentWeekOffset);

        this.lessons.students.forEach(student => {
            student.oneTimeLessons.forEach(lesson => {
                const lessonDate = new Date(lesson.date);
                if (lessonDate >= weekStart && lessonDate <= weekEnd) {
                    const dayOfWeek = ['sunday', 'monday', 'tuesday', 'wednesday',
                        'thursday', 'friday', 'saturday'][lessonDate.getDay()];
                    const hour = parseInt(lesson.time.split(':')[0]);

                    if (hour >= this.startHour && hour <= this.endHour) {
                        const dayElement = document.getElementById(dayOfWeek);
                        if (dayElement) {
                            const hourElement = dayElement.children[hour - this.startHour];
                            if (hourElement) {
                                hourElement.innerHTML = this.createLessonHTML({
                                    id: student.id,
                                    date: lesson.date,
                                    time: lesson.time,
                                    student: student.name,
                                    subject: lesson.subject,
                                    is_recurring: false
                                });
                            }
                        }
                    }
                }
            });
        });
    }

    updateScheduleDisplay() {
        if (!this.lessons || !this.lessons.students) {
            return;
        }

        this.clearSchedule();
        this.displayedLessons.clear();

        const dates = this.getWeekDates(this.currentWeekOffset); // –ò—Å–ø–æ–ª—å–∑—É–µ–º currentWeekOffset

        // –û—á–∏—â–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤
        this.clearAllLessons(daysOfWeek);

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–ª–æ—Ç—ã
        this.displayOpenSlots(daysOfWeek);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
        if (this.lessons.students && Array.isArray(this.lessons.students)) {
            this.displayRegularLessons(daysOfWeek, dates);
        } else {
            console.warn("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.");
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–æ–≤—ã–µ —É—Ä–æ–∫–∏
        this.displayOneTimeLessons();
    }

    clearAllLessons(days) {
        days.forEach(day => {
            const dayElement = document.getElementById(day);
            if (dayElement) {
                const hourElements = dayElement.children;
                for (let hourElement of hourElements) {
                    hourElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏
                }
            }
        });
    }

    getWeekRange(offset = 0) {
        const today = new Date();
        const currentDay = today.getDay();
        const diff = currentDay === 0 ? 6 : currentDay - 1;

        const monday = new Date(today);
        monday.setDate(today.getDate() - diff + (offset * 7));

        const sunday = new Date(monday);
        sunday.setDate(monday.getDate() + 6);

        return {start: monday, end: sunday};
    }

    nextWeek() {
        this.currentWeekOffset++;
        this.updateCalendar();
        this.updateScheduleDisplay();
    }

    prevWeek() {
        this.currentWeekOffset--;
        this.updateCalendar();
        this.updateScheduleDisplay();
    }

    goToCurrentWeek() {
        this.currentWeekOffset = 0;
        this.updateCalendar();
        this.updateScheduleDisplay();
    }

    updateCalendar() {
        this.updateHeaderDates();
        this.updateWeekInfo();
    }

    async loadSchedule() {
        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
            const {start: weekStart, end: weekEnd} = this.getWeekRange(this.currentWeekOffset);

            // 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ YYYY-MM-DD
            const formatDate = (date) => date.toISOString().split('T')[0];
            const startDate = formatDate(weekStart);
            const endDate = formatDate(weekEnd);

            // 3. –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —É—á–∏—Ç–µ–ª—å)
            const teacherId = await this.getMyId(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é

            // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            const timeSlots = await repository.getLessons(teacherId, startDate, endDate);
            console.log(timeSlots.results)
            // 5. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            this.lessons = this.convertTimeSlotsToLegacyFormat(timeSlots.results);

            this.openSlots = await repository.getOpenSlots();
            this.generateTimeSlots();
            this.updateCalendar();
            this.updateScheduleDisplay();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "error");
        }
    }

    async getMyId() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ ID —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ localStorage:
        return currentUserId;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑ TimeSlot –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
    convertTimeSlotsToLegacyFormat(timeSlots) {
        const result = {
            students: []
        };

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
        const studentsMap = new Map();

        timeSlots.forEach(slot => {
            if (!studentsMap.has(slot.student)) {
                studentsMap.set(slot.student, {
                    id: slot.id,
                    name: `Student ${slot.student}`, // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞
                    regularSchedule: [],
                    oneTimeLessons: []
                });
            }

            const student = studentsMap.get(slot.student);
            const lesson = {
                date: slot.date,
                time: slot.time,
                subject: slot.subject
            };

            if (slot.is_recurring) {
                // –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —É—Ä–æ–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                const date = new Date(slot.date);
                const day = ['sunday', 'monday', 'tuesday', 'wednesday',
                    'thursday', 'friday', 'saturday'][date.getDay()];
                student.regularSchedule.push({
                    day: day,
                    time: slot.time.split(':').slice(0, 2).join(':'), // –£–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã
                    subject: slot.subject
                });
            } else {
                student.oneTimeLessons.push(lesson);
            }
        });

        result.students = Array.from(studentsMap.values());
        console.log(result)
        return result;
    }

    async getStudentName(studentId) {
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        // –ù–∞–ø—Ä–∏–º–µ—Ä:
        try {
            const response = await fetch(`/api/students/${studentId}/`);
            const data = await response.json();
            return data.name || `Student ${studentId}`;
        } catch {
            return `Student ${studentId}`;
        }
    }

    updateWorkingHours(start, end) {
        if (!this.lessons) {
            console.warn("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö.");
            return;
        }

        this.startHour = start;
        this.endHour = end;
        this.generateTimeSlots();
        this.updateScheduleDisplay();
    }

    updateCalendarUi() {
        this.generateTimeSlots();
        this.updateScheduleDisplay();
    }

    async updateSchedule() {
        try {
            repository.updateSchedule(this.lessons);
            console.log("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ.");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", error);
        }
    }

    async updateOpenSlots() {
        try {
            repository.updateOpenSlots(this.openSlots);
            // console.log("–û—Ç–∫—Ä—ã—Ç—ã–µ —á–∞—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", error);
        }
    }

    //for admin only
    async addNewStudent(teacherId, studentData) {
        const teacherSchedule = await repository.getSchedule(teacherId)

        console.log(teacherSchedule)
        teacherSchedule.students.push(
            studentData
        )
        console.log(teacherSchedule)

        repository.updateSchedule(teacherSchedule, teacherId)
            .then(async () => {
                console.log('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
                const myId = await getMyId()
                if (teacherId === myId) {
                    console.log("–æ–±–Ω–æ–≤–∏–ª–∏ —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                    this.lessons = teacherSchedule;
                    this.updateCalendarUi();
                }
                showNotification("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", "success");
            })
            .catch((error) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
                showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "error");
            });
    }
}