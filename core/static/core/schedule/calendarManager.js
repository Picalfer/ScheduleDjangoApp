import * as repository from './repository.js';
import {showNotification} from "./utils.js";

const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];

export class CalendarManager {
    constructor() {
        this.currentWeekOffset = 0;
        this.schedule = null;
        this.openSlots = null;
        this.displayedLessons = new Set();
        this.startHour = 6;
        this.endHour = 18;
    }

    getWeekDates(offset = 0) {
        const today = new Date();
        const currentDay = today.getDay();
        const diff = currentDay === 0 ? 6 : currentDay - 1;

        const monday = new Date(today);
        monday.setDate(today.getDate() - diff + (offset * 7));

        const dates = [];
        for (let i = 0; i < 7; i++) {
            const date = new Date(monday);
            date.setDate(monday.getDate() + i);
            dates.push(date); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç Date, –∞ –Ω–µ —á–∏—Å–ª–æ
        }

        return dates;
    }

    formatDate(date) {
        const months = [
            '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
            '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
        ];
        return `${date.getDate()} ${months[date.getMonth()]}`;
    }

    updateHeaderDates() {
        const dates = this.getWeekDates(this.currentWeekOffset);
        const dateElements = document.querySelectorAll('.date');
        const dayHeaders = document.querySelectorAll('.day-header');

        const today = new Date();
        const currentDate = today.getDate();
        const currentMonth = today.getMonth();
        const currentYear = today.getFullYear();

        dateElements.forEach((element, index) => {
            const displayedDate = new Date(today);
            displayedDate.setDate(today.getDate() - (today.getDay() === 0 ? 6 : today.getDay() - 1) + index + (this.currentWeekOffset * 7));

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º formatDate –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã
            element.textContent = this.formatDate(displayedDate);

            if (displayedDate.getDate() === currentDate &&
                displayedDate.getMonth() === currentMonth &&
                displayedDate.getFullYear() === currentYear) {
                dayHeaders[index].classList.add('current-day');
            } else {
                dayHeaders[index].classList.remove('current-day');
            }
        });
    }

    updateWeekInfo() {
        const today = new Date();
        const currentDay = today.getDay();
        const diff = currentDay === 0 ? 6 : currentDay - 1;

        const monday = new Date(today);
        monday.setDate(today.getDate() - diff + (this.currentWeekOffset * 7));

        const sunday = new Date(monday);
        sunday.setDate(monday.getDate() + 6);

        const weekRangeElement = document.getElementById('week-range');
        weekRangeElement.textContent = `${this.formatDate(monday)} - ${this.formatDate(sunday)}`;
    }

    clearSchedule() {
        document.querySelectorAll('.week-day .hour').forEach(hour => {
            if (!hour.querySelector('.lesson')) {
                hour.className = 'hour';
                hour.innerHTML = '';
            }
        });
    }

    createLessonHTML(lesson) {
        const emoji = lesson.status === 'permanent' ? 'üîÑ' : '1Ô∏è‚É£';
        const statusText = lesson.status === 'permanent' ? '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —É—Ä–æ–∫' : '–†–∞–∑–æ–≤—ã–π —É—Ä–æ–∫';

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç–∞
        const studentEmoji = 'üë©‚Äçüéì'; // –°–º–∞–π–ª–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞
        const subjectEmoji = 'üìö'; // –°–º–∞–π–ª–∏–∫ –ø—Ä–µ–¥–º–µ—Ç–∞

        return `
            <div class="lesson ${lesson.status}" 
                 data-student-id="${lesson.id}" 
                 onclick="window.openLessonModal(${JSON.stringify(lesson).replace(/"/g, '&quot;')})">
                <h4 data-emoji="${emoji}">${statusText}</h4>
                <p>${studentEmoji} <span id="student-name">${lesson.student}</span></p>
                <p>${subjectEmoji} <span id="subject-name">${lesson.subject}</span></p>
            </div>
        `;
    }

    generateTimeSlots() {
        const timeColumn = document.querySelector('.time-column');
        const weekDays = document.querySelectorAll('.week-day');

        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã
        timeColumn.innerHTML = '';
        weekDays.forEach(day => day.innerHTML = '');

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
        for (let hour = this.startHour; hour <= this.endHour; hour++) {
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∞—Å –≤ "HH:00"
            const formattedHour = `${String(hour).padStart(2, '0')}:00`;

            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –∫–æ–ª–æ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏
            const timeSlot = document.createElement('div');
            timeSlot.className = 'time';
            timeSlot.innerHTML = `<p>${formattedHour}</p>`;
            timeColumn.appendChild(timeSlot);

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
            weekDays.forEach((day, dayIndex) => {
                const hourSlot = document.createElement('div');
                hourSlot.className = 'hour';

                // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã data-day –∏ data-hour
                hourSlot.setAttribute('data-day', daysOfWeek[dayIndex]); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è
                hourSlot.setAttribute('data-hour', formattedHour); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Å

                day.appendChild(hourSlot);
            });
        }
    }

    displayOpenSlots(days) {
        days.forEach((day, dayIndex) => {
            const dayElement = document.getElementById(day);
            if (!dayElement) {
                console.error("–≠–ª–µ–º–µ–Ω—Ç –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω:", day);
                return;
            }

            const slots = this.openSlots.weeklyOpenSlots[day] || [];
            slots.forEach(time => {
                const hour = parseInt(time.split(':')[0]);
                if (hour >= this.startHour && hour <= this.endHour) {
                    const hourIndex = hour - this.startHour;
                    const hourElement = dayElement.children[hourIndex];
                    if (hourElement) {
                        hourElement.classList.add('open-window');
                    }
                }
            });
        });
    }

    displayRegularLessons(days, dates) {
        if (!this.schedule || !this.schedule.students) {
            console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö –≤ schedule');
            return;
        }

        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        this.schedule.students.forEach(student => {
            const {id, name, regularSchedule} = student;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            if (regularSchedule && Array.isArray(regularSchedule)) {
                regularSchedule.forEach(lesson => {
                    const {day, time, subject} = lesson;
                    const hour = parseInt(time.split(':')[0]);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    if (hour >= this.startHour && hour <= this.endHour) {
                        const dayElement = document.getElementById(day);
                        if (dayElement) {
                            const hourIndex = hour - this.startHour;
                            const hourElement = dayElement.children[hourIndex];

                            if (hourElement) {
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ day —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ days
                                const dayIndex = days.indexOf(day);
                                if (dayIndex === -1) {
                                    console.warn(`–î–µ–Ω—å "${day}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ days`);
                                    return;
                                }

                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dates[dayIndex] —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º Date
                                const date = dates[dayIndex];
                                if (!(date instanceof Date)) {
                                    console.warn(`dates[${dayIndex}] –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º Date`);
                                    return;
                                }

                                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                                const formattedDate = date.toISOString().split('T')[0];

                                // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                                hourElement.innerHTML = this.createLessonHTML({
                                    id: id,
                                    date: formattedDate,
                                    time: time,
                                    student: name,
                                    subject: subject,
                                    status: 'permanent'
                                });
                            }
                        }
                    }
                });
            } else {
                console.warn(`–ù–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞: ${name}`);
            }
        });
    }

    displayOneTimeLessons() {
        if (!this.schedule || !this.schedule.students) {
            console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö –≤ schedule');
            return;
        }

        // –ú–∞—Å—Å–∏–≤ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        const daysOfWeek = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];

        // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        const {start: weekStart, end: weekEnd} = this.getWeekRange(this.currentWeekOffset);

        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        this.schedule.students.forEach(student => {
            const {id, name, oneTimeLessons} = student;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–æ–≤—ã–µ —É—Ä–æ–∫–∏
            if (oneTimeLessons && Array.isArray(oneTimeLessons)) {

                oneTimeLessons.forEach(lesson => {
                    const {date, time, subject} = lesson;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ date —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
                    if (!date || typeof date !== 'string') {
                        console.warn(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ${name}: ${date}`);
                        return;
                    }

                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç Date
                    const lessonDate = new Date(date);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ lessonDate —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π
                    if (isNaN(lessonDate.getTime())) {
                        console.warn(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ${name}: ${date}`);
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —É—Ä–æ–∫–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
                    if (lessonDate < weekStart || lessonDate > weekEnd) {
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    const hour = parseInt(time.split(':')[0]);
                    if (hour >= this.startHour && hour <= this.endHour) {
                        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–Ω—è
                        const dayOfWeek = daysOfWeek[lessonDate.getDay()]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è

                        const dayElement = document.getElementById(dayOfWeek);
                        if (dayElement) {
                            const hourIndex = hour - this.startHour;
                            const hourElement = dayElement.children[hourIndex];

                            if (hourElement) {
                                hourElement.innerHTML = this.createLessonHTML({
                                    id: id,
                                    date: date,
                                    time: time,
                                    student: name,
                                    subject: subject,
                                    status: 'one-time'
                                });
                            } else {
                                console.warn(`–Ø—á–µ–π–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ ${time} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–Ω–µ ${dayOfWeek}`);
                            }
                        } else {
                            console.warn(`–≠–ª–µ–º–µ–Ω—Ç –¥–Ω—è ${dayOfWeek} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                        }
                    } else {
                        console.warn(`–í—Ä–µ–º—è —É—Ä–æ–∫–∞ ${time} –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞`);
                    }
                });
            } else {
                console.warn(`–ù–µ—Ç —Ä–∞–∑–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞: ${name}`);
            }
        });
    }

    updateScheduleDisplay() {
        if (!this.schedule || !this.schedule.students) {
            console.warn("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö.");
            return;
        }

        this.clearSchedule();
        this.displayedLessons.clear();

        const dates = this.getWeekDates(this.currentWeekOffset); // –ò—Å–ø–æ–ª—å–∑—É–µ–º currentWeekOffset

        // –û—á–∏—â–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤
        this.clearAllLessons(daysOfWeek);

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–ª–æ—Ç—ã
        this.displayOpenSlots(daysOfWeek);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
        if (this.schedule.students && Array.isArray(this.schedule.students)) {
            this.displayRegularLessons(daysOfWeek, dates);
        } else {
            console.warn("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.");
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–∑–æ–≤—ã–µ —É—Ä–æ–∫–∏
        this.displayOneTimeLessons();
    }

    clearAllLessons(days) {
        days.forEach(day => {
            const dayElement = document.getElementById(day);
            if (dayElement) {
                const hourElements = dayElement.children;
                for (let hourElement of hourElements) {
                    hourElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏
                }
            }
        });
    }

    getWeekRange(offset = 0) {
        const today = new Date();
        const currentDay = today.getDay();
        const diff = currentDay === 0 ? 6 : currentDay - 1;

        const monday = new Date(today);
        monday.setDate(today.getDate() - diff + (offset * 7));

        const sunday = new Date(monday);
        sunday.setDate(monday.getDate() + 6);

        return {start: monday, end: sunday};
    }

    nextWeek() {
        this.currentWeekOffset++;
        this.updateCalendar();
        this.updateScheduleDisplay();
    }

    prevWeek() {
        this.currentWeekOffset--;
        this.updateCalendar();
        this.updateScheduleDisplay();
    }

    goToCurrentWeek() {
        this.currentWeekOffset = 0;
        this.updateCalendar();
        this.updateScheduleDisplay();
    }

    updateCalendar() {
        this.updateHeaderDates();
        this.updateWeekInfo();
    }

    async loadSchedule() {
        try {
            this.schedule = await repository.getSchedule();
            this.openSlots = await repository.getOpenSlots();

            if (!this.schedule || !this.schedule.students) {
                console.warn("–î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö.");
                return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö
            if (!this.schedule || !this.schedule.students || this.schedule.students.length === 0) {
                console.warn("–î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö.");
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã —á–∞—Å–æ–≤
            this.generateTimeSlots();

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            this.updateCalendar();

            this.updateScheduleDisplay();

            // TODO —É–±—Ä–∞—Ç—å?
            this.updateCalendar();
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    updateWorkingHours(start, end) {

        if (!this.schedule || !this.schedule.students) {
            console.warn("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö.");
            return;
        }
        
        this.startHour = start;
        this.endHour = end;
        this.generateTimeSlots();
        this.updateScheduleDisplay();
    }

    updateCalendarUi() {
        this.generateTimeSlots();
        this.updateScheduleDisplay();
    }

    async updateSchedule() {
        try {
            repository.updateSchedule(this.schedule);
            console.log("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–∏—Ç—Ä–∏–∫—Å–µ.");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", error);
        }
    }

    async updateOpenSlots() {
        try {
            repository.updateOpenSlots(this.openSlots);
            console.log("–û—Ç–∫—Ä—ã—Ç—ã–µ —á–∞—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", error);
        }
    }

    //for admin only
    async addNewStudent(teacherId, studentData) {
        const teacherSchedule = await repository.getSchedule(teacherId)

        console.log(teacherSchedule)
        teacherSchedule.students.push(
            studentData
        )
        console.log(teacherSchedule)

        repository.updateSchedule(teacherSchedule, teacherId)
            .then(async () => {
                console.log('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
                const myId = await getMyId()
                if (teacherId === myId) {
                    console.log("–æ–±–Ω–æ–≤–∏–ª–∏ —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                    this.schedule = teacherSchedule;
                    this.updateCalendarUi();
                }
                showNotification("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", "success");
            })
            .catch((error) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
                showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "error");
            });
    }
}