import * as repository from './repository.js';
import {showNotification} from "./utils.js";

export class CalendarManager {
    static DAYS_OF_WEEK = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
    static MONTH_NAMES = [
        '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
        '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
    ];

    constructor() {
        this.currentWeekOffset = 0;
        this.lessons = [];
        this.openSlots = {};
        this.displayedLessons = new Set();
        this.startHour = 6;
        this.endHour = 18;
    }

    getDayOfWeek(date) {
        return ['sunday', 'monday', 'tuesday', 'wednesday',
            'thursday', 'friday', 'saturday'][date.getDay()];
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—ã –Ω–µ–¥–µ–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
     * @param {number} offset - –°–º–µ—â–µ–Ω–∏–µ –≤ –Ω–µ–¥–µ–ª—è—Ö (0 - —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è)
     * @returns {Date[]} –ú–∞—Å—Å–∏–≤ –¥–∞—Ç —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
     */
    getWeekDates(offset = 0) {
        const today = new Date();
        const currentDay = today.getDay();
        // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (0) —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 6, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        const diff = currentDay === 0 ? 6 : currentDay - 1;

        const monday = new Date(today);
        monday.setDate(today.getDate() - diff + (offset * 7));

        return Array.from({length: 7}, (_, i) => {
            const date = new Date(monday);
            date.setDate(monday.getDate() + i);
            return date;
        });
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "–¥–µ–Ω—å –º–µ—Å—è—Ü"
     * @param {Date} date - –î–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
     */
    formatDate(date) {
        return `${date.getDate()} ${CalendarManager.MONTH_NAMES[date.getMonth()]}`;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
     */
    updateHeaderDates() {
        const dates = this.getWeekDates(this.currentWeekOffset);
        const dateElements = document.querySelectorAll('.date');
        const dayHeaders = document.querySelectorAll('.day-header');

        const today = new Date();
        const currentDate = today.getDate();
        const currentMonth = today.getMonth();
        const currentYear = today.getFullYear();

        dateElements.forEach((element, index) => {
            const displayedDate = dates[index]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ getWeekDates
            element.textContent = this.formatDate(displayedDate);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Ç–µ–∫—É—â–∏–º
            const isCurrentDay = displayedDate.getDate() === currentDate &&
                displayedDate.getMonth() === currentMonth &&
                displayedDate.getFullYear() === currentYear;

            dayHeaders[index].classList.toggle('current-day', isCurrentDay);
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–µ–¥–µ–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     */
    updateWeekInfo() {
        const dates = this.getWeekDates(this.currentWeekOffset);
        const [monday, sunday] = [dates[0], dates[6]]; // –ü–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏

        const weekRangeElement = document.getElementById('week-range');
        weekRangeElement.textContent = `${this.formatDate(monday)} - ${this.formatDate(sunday)}`;
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —É–¥–∞–ª—è—è –≤—Å–µ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ —á–∞—Å–æ–≤
     * (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —è—á–µ–π–∫–∏ —Å —É—Ä–æ–∫–∞–º–∏)
     */
    clearSchedule() {
        document.querySelectorAll('.week-day .hour').forEach(hour => {
            if (!hour.querySelector('.lesson')) {
                hour.className = 'hour';
                hour.innerHTML = '';
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç HTML-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–∫–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
     * @param {Object} lesson - –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
     * @param {number} lesson.id - ID —É—Ä–æ–∫–∞
     * @param {string} lesson.lesson_type - –¢–∏–ø —É—Ä–æ–∫–∞ ('recurring' –∏–ª–∏ 'single')
     * @param {string} lesson.status - –°—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞ ('completed', 'scheduled' –∏ —Ç.–¥.)
     * @param {string} lesson.subject - –ü—Ä–µ–¥–º–µ—Ç —É—Ä–æ–∫–∞
     * @param {Object|number} lesson.student - –î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–ª–∏ ID —Å—Ç—É–¥–µ–Ω—Ç–∞
     * @param {string} [lesson.student.name] - –ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
     * @returns {string} HTML-—Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
     */
    createLessonHTML(lesson) {
        const isRecurring = lesson.lesson_type === 'recurring';
        const isCompleted = lesson.status === 'completed';
        const isCanceled = lesson.status === 'canceled';
        const isFuture = lesson.is_future;

        return `
                    <div class="lesson ${isRecurring ? 'permanent' : 'one-time'} ${isCanceled ? 'cancelled' : ''} ${isCompleted ? 'completed' : ''} ${isFuture ? 'future' : ''}" 
                         data-lesson-id="${lesson.id}"
                         data-status="${lesson.status || 'scheduled'}"
                         onclick="${isFuture ? 'event.preventDefault(); window.showNotification(\'–≠—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–∫\', \'info\')' : `window.openLessonModal(${JSON.stringify(lesson).replace(/"/g, '&quot;')})`}">
                        <h4>${isRecurring ? 'üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π' : '1Ô∏è‚É£ –†–∞–∑–æ–≤—ã–π'} —É—Ä–æ–∫</h4>
                        <p>üë©‚Äçüéì ${lesson.student_name}</p>
                        <p>üìö ${lesson.course}</p>
                    </div>
                `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∫–æ–ª–æ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ —è—á–µ–π–∫–∏ –¥–ª—è —É—Ä–æ–∫–æ–≤)
     * –°–æ–∑–¥–∞–µ—Ç:
     * - –ö–æ–ª–æ–Ω–∫—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ (–≤ .time-column)
     * - –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞ –≤ –∫–∞–∂–¥–æ–º –¥–Ω–µ –Ω–µ–¥–µ–ª–∏ (–≤ .week-day)
     */
    generateTimeSlots() {
        const timeColumn = document.querySelector('.time-column');
        const weekDays = document.querySelectorAll('.week-day');

        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã
        timeColumn.innerHTML = '';
        weekDays.forEach(day => day.innerHTML = '');

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        Array.from({length: this.endHour - this.startHour + 1}, (_, i) => this.startHour + i)
            .forEach(hour => {
                const formattedHour = `${String(hour).padStart(2, '0')}:00`;

                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–ª–æ–Ω–∫—É
                timeColumn.insertAdjacentHTML('beforeend',
                    `<div class="time"><p>${formattedHour}</p></div>`);

                // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                weekDays.forEach((day, dayIndex) => {
                    day.insertAdjacentHTML('beforeend', `
                    <div class="hour" 
                         data-day="${CalendarManager.DAYS_OF_WEEK[dayIndex]}" 
                         data-hour="${formattedHour}">
                    </div>
                `);
                });
            });
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
     */
    displayOpenSlots() {
        if (!this.openSlots) {
            console.warn("openSlots –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
            return;
        }

        // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞
        document.querySelectorAll('.open-window').forEach(el => {
            el.classList.remove('open-window');
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞
        CalendarManager.DAYS_OF_WEEK.forEach(day => {
            const dayElement = document.getElementById(day);
            if (!dayElement) {
                console.error("–≠–ª–µ–º–µ–Ω—Ç –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω:", day);
                return;
            }

            const slots = this.openSlots[day] || [];
            slots.forEach(time => {
                const hour = parseInt(time.split(':')[0]);
                if (hour >= this.startHour && hour <= this.endHour) {
                    const hourIndex = hour - this.startHour;
                    const hourElement = dayElement.children[hourIndex];
                    if (hourElement) {
                        hourElement.classList.add('open-window');
                    }
                }
            });
        });
    }


    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—Ä–æ–∫–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π –∏ –¥–∞—Ç
     */
    displayLessons() {
        if (!Array.isArray(this.lessons)) {
            console.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–æ–≤");
            return;
        }

        const currentWeekDates = this.getWeekDates(this.currentWeekOffset).map(date =>
            date.toISOString().split('T')[0]
        );

        this.lessons.forEach(lesson => {
            try {
                // –î–ª—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ (–∏ —Ä–∞–∑–æ–≤—ã—Ö, –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö) –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞—Ç—ã
                if (!currentWeekDates.includes(lesson.date)) {
                    return;
                }

                const lessonDate = new Date(lesson.date);
                const dayOfWeek = this.getDayOfWeek(lessonDate);
                const hour = parseInt(lesson.time.split(':')[0]);

                const dayElement = document.getElementById(dayOfWeek);
                if (!dayElement) return;

                const hourElement = dayElement.children[hour - this.startHour];
                if (hourElement) {
                    hourElement.innerHTML = this.createLessonHTML(lesson);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞:', error);
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    updateScheduleDisplay() {
        this.clearSchedule();
        this.clearAllLessons();
        this.displayOpenSlots();
        this.displayLessons();
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —è—á–µ–π–∫–∏ —Å —É—Ä–æ–∫–∞–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
     */
    clearAllLessons() {
        this.displayedLessons.clear();
        document.querySelectorAll('.week-day .hour').forEach(hourElement => {
            hourElement.innerHTML = '';
            hourElement.classList.remove('has-lesson');
        });
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –¥–ª—è –Ω–µ–¥–µ–ª–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
     * @param {number} offset - –°–º–µ—â–µ–Ω–∏–µ –≤ –Ω–µ–¥–µ–ª—è—Ö (0 - —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è)
     * @returns {{start: Date, end: Date}} –û–±—ä–µ–∫—Ç —Å –¥–∞—Ç–∞–º–∏ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏
     */
    getWeekRange(offset = 0) {
        const today = new Date();
        const currentDay = today.getDay();
        const diff = currentDay === 0 ? 6 : currentDay - 1; // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è

        const monday = new Date(today);
        monday.setDate(today.getDate() - diff + (offset * 7));

        const sunday = new Date(monday);
        sunday.setDate(monday.getDate() + 6);

        return {start: monday, end: sunday};
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
     */
    nextWeek() {
        this.currentWeekOffset++;
        this.updateCalendar();
        this.updateScheduleDisplay();
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–¥–µ–ª—é
     */
    prevWeek() {
        this.currentWeekOffset--;
        this.updateCalendar();
        this.updateScheduleDisplay();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ
     */
    goToCurrentWeek() {
        if (this.currentWeekOffset !== 0) {
            this.currentWeekOffset = 0;
            this.updateCalendar();
            this.updateScheduleDisplay();
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–∑–∞–≥–æ–ª–æ–≤–∫–∏, –¥–∞—Ç—ã)
     */
    updateCalendar() {
        this.updateHeaderDates();
        this.updateWeekInfo();
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     * @param {number|null} teacherId - ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (null - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
     * @param {string|null} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
     * @param {string|null} endDate - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
     */
    async loadSchedule(teacherId = currentUserId, startDate = null, endDate = null) {
        try {
            const {start: weekStart, end: weekEnd} = this.getWeekRange(this.currentWeekOffset);
            const formatDate = (date) => date.toISOString().split('T')[0];
            const queryStartDate = startDate || formatDate(weekStart);
            const queryEndDate = endDate || formatDate(weekEnd);
            const effectiveTeacherId = teacherId || this.getMyId();
            console.log(effectiveTeacherId)

            const response = await repository.getLessons(effectiveTeacherId, queryStartDate, queryEndDate);
            console.log('Server response:', response);

            let lessons = [];
            if (response && typeof response === 'object' && Array.isArray(response.results)) {
                lessons = response.results;

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ —É—Ä–æ–∫–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
                const fakeLessons = [];
                const today = new Date();
                const endDateGeneration = new Date();
                const futureDays = 30
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ —É—Ä–æ–∫–∏ –Ω–∞ n –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
                endDateGeneration.setDate(today.getDate() + futureDays);

                lessons.forEach(lesson => {
                    if (lesson.lesson_type === 'recurring' && lesson.schedule && lesson.schedule.length > 0 && lesson.status === 'scheduled') {

                        const generatedLessons = this.generateFutureLessons(lesson, endDateGeneration);
                        fakeLessons.push(...generatedLessons);
                    }
                });

                // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏ —Ñ–µ–π–∫–æ–≤—ã–µ —É—Ä–æ–∫–∏
                this.lessons = [...lessons, ...fakeLessons];
            } else {
                console.warn('Unexpected response format, initializing empty lessons');
                this.lessons = [];
            }

            this.openSlots = await repository.getOpenSlots(teacherId);
            this.generateTimeSlots();
            this.updateCalendar();
            this.updateScheduleDisplay();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
            showNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "error");
            this.lessons = [];
        }
    }

    generateFutureLessons(lesson, endDate) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (JS: 0=–í—Å, 1=–ü–Ω, ... 6=–°–±)
        const weekdayMapping = {
            'monday': 1, 'tuesday': 2, 'wednesday': 3,
            'thursday': 4, 'friday': 5, 'saturday': 6, 'sunday': 0
        };

        const fakeLessons = [];
        // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        const startDate = new Date(lesson.date);
        startDate.setHours(0, 0, 0, 0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è

        function formatDate(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        lesson.schedule.forEach(scheduleItem => {
            const targetWeekday = weekdayMapping[scheduleItem.day.toLowerCase()];
            const [hours, minutes] = scheduleItem.time.split(':').map(Number);

            // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ startDate
            let currentDate = new Date(startDate);
            currentDate.setDate(currentDate.getDate() + 1);

            const today = new Date();
            today.setHours(0, 0, 0, 0);

            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–Ω–∏ –¥–æ endDate
            while (currentDate <= endDate) {
                // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤—ã–º
                if (currentDate.getDay() === targetWeekday) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º (–≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
                    if (currentDate >= today) {
                        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞—Ç—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        const lessonDate = new Date(currentDate);
                        lessonDate.setHours(hours, minutes, 0, 0);

                        // –°–æ–∑–¥–∞–µ–º fake-—É—Ä–æ–∫
                        const fakeLesson = {
                            ...lesson,
                            id: `fake_${lesson.id}_${lessonDate.getTime()}`,
                            date: formatDate(lessonDate),
                            time: `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:00`,
                            is_future: true,
                            original_lesson_id: lesson.id
                        };
                        fakeLessons.push(fakeLesson);
                    }
                }
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
                currentDate.setDate(currentDate.getDate() + 1);
            }
        });

        return fakeLessons;
    }


    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {number} ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getMyId() {
        return currentUserId;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     * @param {number} start - –ù–∞—á–∞–ª—å–Ω—ã–π —á–∞—Å (6-23)
     * @param {number} end - –ö–æ–Ω–µ—á–Ω—ã–π —á–∞—Å (6-23)
     */
    updateWorkingHours(start, end) {
        if (!this.lessons) {
            console.warn("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ");
            return;
        }

        this.startHour = start;
        this.endHour = end;
        this.generateTimeSlots();
        this.updateScheduleDisplay();
    }

    /**
     * –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ—Ç UI –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç —Å–ª–æ—Ç—ã –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)
     */
    updateCalendarUi() {
        this.generateTimeSlots();
        this.updateScheduleDisplay();
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
     */
    async updateOpenSlots() {
        try {
            await repository.updateOpenSlots(this.openSlots);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:", error);
            showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤", "error");
        }
    }
}