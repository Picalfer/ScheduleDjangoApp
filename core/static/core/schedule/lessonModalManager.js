import {showNotification} from "./utils.js";
import {completeLesson} from "./repository.js";

export class LessonModalManager {
    constructor() {
        this.modal = document.getElementById("lesson-modal");
        this.closeButton = document.getElementsByClassName("close")[0];
        this.form = document.getElementById("lesson-form");
        this.cancelButton = this.modal.querySelector(".cancel-button");
        this.submitButton = this.modal.querySelector(".submit-button");

        this.lessonId = null;

        // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.topicInput = document.getElementById("lesson-topic");

        this.setupEventListeners();
    }

    setupEventListeners() {
        this.closeButton.onclick = () => this.close();
        this.cancelButton.onclick = () => this.close();

        document.addEventListener('click', (e) => {
            if (e.target === this.modal) {
                this.close();
            }
        });

        this.submitButton.onclick = (e) => {
            e.preventDefault();
            if (this.validateForm()) {
                this.admitLesson()
                this.close();
            }
        };

        this.topicInput.addEventListener('input', () => {
            const topicGroup = this.topicInput.closest('.form-group');
            if (this.topicInput.value.trim()) {
                topicGroup.classList.remove('error');
            }
        });
    }

    admitLesson() {
        // 1. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ä–æ–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–π? –ë–∞–ª–∞–Ω—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ —É–º–µ–Ω—å—à–∏—Ç—Å—è –Ω–∞ 1.")) {
            return;
        }

        // 2. –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ completeLesson
        completeLesson(this.lessonId)
            .then(response => {
                // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                showNotification(
                    `–£—Ä–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω! –û—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–∫–æ–≤: ${response.remaining_balance}`,
                    "success"
                );

                // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                this.markLessonAsCompleted(response);

                // 5. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                console.log('Lesson completed:', {
                    lessonId: this.lessonId,
                    studentId: this.lessonId,
                    newBalance: response.remaining_balance,
                    logId: response.log_id
                });
            })
            .catch(error => {
                // 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:", error);
                showNotification(
                    error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —É—Ä–æ–∫–∞",
                    "error"
                );
            });
    }

    markLessonAsCompleted(responseData) {
        // 1. –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —É—Ä–æ–∫–∞
        const lessonElement = document.querySelector(`[data-lesson-id="${this.lessonId}"]`);

        // 2. –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å completed
        if (lessonElement) {
            lessonElement.classList.add('completed');

            // 3. –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            const completeBtn = lessonElement.querySelector('.complete-btn');
            if (completeBtn) {
                completeBtn.remove();
            }

            // 4. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            const statusBadge = document.createElement('span');
            statusBadge.className = 'lesson-status';
            statusBadge.textContent = '‚úì –ü—Ä–æ–≤–µ–¥–µ–Ω';
            lessonElement.appendChild(statusBadge);
        }

        // 5. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç)
        const balanceElement = document.getElementById('student-balance');
        if (balanceElement) {
            balanceElement.textContent = responseData.remaining_balance;
        }
    }

    close() {
        this.modal.style.display = "none";
        this.form.reset();
        this.lessonId = null;
        // –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        this.topicInput.closest('.form-group').classList.remove('error');
    }

    open(lessonData) {
        this.lessonId = lessonData.id
        this.modal.style.display = 'block';
        this.modal.querySelector('.modal-content').scrollTop = 0;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ç–∏–ø–∞ —É—Ä–æ–∫–∞ –∫ –º–æ–¥–∞–ª—å–Ω–æ–º—É –æ–∫–Ω—É
        const modalContent = this.modal.querySelector('.modal-content');
        modalContent.classList.remove('permanent', 'one-time');
        modalContent.classList.add(lessonData.status);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
        const today = new Date();
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —É—Ä–æ–∫–∞
        document.getElementById("lesson-date").value = today.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        document.getElementById("lesson-course").value = lessonData.subject;

        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        document.getElementById("lesson-topic").value = "";
        document.getElementById("lesson-homework").value = "";
        document.getElementById("lesson-comment").value = "";

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
        const emoji = lessonData.status === 'permanent' ? 'üîÑ' : '1Ô∏è‚É£';
        const statusText = lessonData.status === 'permanent' ? '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —É—Ä–æ–∫' : '–†–∞–∑–æ–≤—ã–π —É—Ä–æ–∫';
        this.modal.querySelector('.lesson-type').innerHTML = `${emoji} ${statusText}`;
        this.modal.querySelector('.lesson-student').textContent = `–£—á–µ–Ω–∏–∫: ${lessonData.student}`;
    }

    validateForm() {
        let isValid = true;
        const topicGroup = this.topicInput.closest('.form-group');

        if (!this.topicInput.value.trim()) {
            topicGroup.classList.add('error');
            isValid = false;
        } else {
            topicGroup.classList.remove('error');
        }

        return isValid;
    }
}